<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ateliers par Village</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        button {
            padding: 10px;
            margin: 5px;
            font-size: 16px;
            cursor: pointer;
        }
        #atelier-info {
            margin-top: 20px;
        }
        .atelier-item {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h1>Choisissez un village pour voir les prochains ateliers :</h1>

    <!-- Boutons pour chaque village -->
    <button onclick="loadData('Chappes')">Chappes</button>
    <button onclick="loadData('Courtenot')">Courtenot</button>
    <button onclick="loadData('Jully-sur-Sarce')">Jully-sur-Sarce</button>
    <button onclick="loadData('Rumilly-l√®s-Vaudes')">Rumilly-l√®s-Vaudes</button>
    <button onclick="loadData('Saint-Parres-l√®s-Vaudes')">Saint-Parres-l√®s-Vaudes</button>
    <button onclick="loadData('Vaudes')">Vaudes</button>
    <button onclick="loadData('Villemorien')">Villemorien</button>
    <button onclick="loadData('Villemoyenne')">Villemoyenne</button>
    <button onclick="loadData('Virey-sous-Bar')">Virey-sous-Bar</button>

    <div id="atelier-info">
        <h2>Prochains ateliers :</h2>
        <div id="atelier-list"></div>
    </div>

    <script>
        const sheetId = '1YTETTyL4vQtVIylZU39X1p2mjZtBbSmhoo59ouQfE9Q';
        const apiKey = 'AIzaSyD7eFDdZ36qLTJ6jRSBNea4sAp0j6YAy3Y'; // Votre cl√© API

        // Fonction pour charger les donn√©es de la feuille Google Sheets
        function loadData(village) {
            const url = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/Feuille%201!A:E?key=${apiKey}`;

            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erreur de r√©cup√©ration des donn√©es');
                    }
                    return response.json();
                })
                .then(data => {
                    displayNextAtelier(data.values, village);
                })
                .catch(error => {
                    console.error('Erreur:', error);
                });
        }

        // Fonction pour afficher le prochain atelier du village s√©lectionn√©
        function displayNextAtelier(values, village) {
            const atelierList = document.getElementById('atelier-list');
            atelierList.innerHTML = '';  // R√©initialise la liste avant d'afficher de nouvelles donn√©es

            const now = new Date();
            let upcomingAtelier = null;

            // Parcours des donn√©es et recherche du prochain atelier pour le village
            values.forEach(row => {
                const [date, villageName, , lieu, thematique] = row;
                const workshopDate = parseDate(date); // Parse the date properly

                // Si la date de l'atelier est apr√®s la date actuelle et que le village correspond
                if (villageName === village && workshopDate >= now) {
                    if (!upcomingAtelier || workshopDate < new Date(upcomingAtelier[0])) {
                        upcomingAtelier = row; // Garde l'atelier avec la date la plus proche
                    }
                }
            });

            // Si un atelier a √©t√© trouv√©, l'afficher
            if (upcomingAtelier) {
                const [date, , date2, lieu, thematique] = upcomingAtelier;
                const listItem = document.createElement('div');
                listItem.classList.add('atelier-item');
                listItem.innerHTML = `
                    üìÖ <strong>${formatDate(date)}</strong> <br>
                    ‚è∞ <strong>${date2}</strong> <br>
                    üèòÔ∏è <strong>${lieu}</strong> <br>
                    üîñ <strong>${thematique}</strong> <br><br>
                `;
                atelierList.appendChild(listItem);
            } else {
                // Aucun atelier √† venir pour ce village
                atelierList.innerHTML = `<div>Aucun atelier √† venir pour ${village}.</div>`;
            }
        }

        // Fonction pour parser les dates au format 'jj/mm/aaaa'
        function parseDate(dateString) {
            const parts = dateString.split('/');
            const day = parseInt(parts[0], 10);
            const month = parseInt(parts[1], 10) - 1; // Mois commence √† 0
            const year = parseInt(parts[2], 10);
            return new Date(year, month, day);
        }

        // Fonction pour formater la date au format "Jeudi 9 janvier 2025"
        function formatDate(dateString) {
            const date = parseDate(dateString);
            const daysOfWeek = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];
            const monthsOfYear = ['janvier', 'f√©vrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'ao√ªt', 'septembre', 'octobre', 'novembre', 'd√©cembre'];

            const dayOfWeek = daysOfWeek[date.getDay()];
            const dayOfMonth = date.getDate();
            const month = monthsOfYear[date.getMonth()];
            const year = date.getFullYear();

            return `${dayOfWeek} ${dayOfMonth} ${month} ${year}`;
        }
    </script>
</body>
</html>
