<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Permanence num√©rique du jour</title>
    <style>
        body {
            text-align: center;
            font-family: Arial, sans-serif;
            font-size: 18px;
            margin: 0;
            padding: 0;
            background-color: white; /* Arri√®re-plan blanc */
        }
        h1 {
            background-color: #003366;
            color: white;
            margin: 0;
            padding: 10px;
            font-size: 1em; /* Taille r√©duite de moiti√© */
        }
        h2, h3 {
            color: #003366;
            margin: 10px 0;
        }
        #result {
            background: white;
            margin: 20px auto;
            padding: 20px;
            max-width: 600px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            border-radius: 8px;
        }
        .info-block {
            border: 1px solid #003366;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
            text-align: left;
        }
        .info-block p {
            margin: 8px 0;
        }
        .no-data {
            color: red;
            font-weight: bold;
            margin-top: 15px;
        }
    </style>
    <script>
        const SHEET_ID = '1i9L8f83fnMzIFUVoTJlPtGbylm3Lf8Md7Ph7LkC74nA';
        const API_KEY = 'AIzaSyBYM19vbTPAi49sXzjqPJsFzhRsZHVKql8';
        const RANGE = 'A:D';

        async function fetchPlanning() {
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${RANGE}?key=${API_KEY}`;
            try {
                const response = await fetch(url);
                const data = await response.json();

                const rows = data.values;
                console.log("Donn√©es r√©cup√©r√©es :", rows);

                if (!rows || rows.length <= 1) {
                    document.getElementById('result').innerHTML = "<p>Aucune donn√©e disponible.</p>";
                    return;
                }

                const headers = rows[0];
                const entries = rows.slice(1);

                const permanenceDuJour = entries.find(row => {
                    const date = parseDate(row[0]);
                    return date && date.getTime() === today.getTime();
                });

                const resultDiv = document.getElementById('result');
                let resultHTML = ``;

                if (permanenceDuJour) {
                    const [date, village, heure, lieu] = permanenceDuJour;

                    if (village && heure && lieu) {
                        resultHTML += `
                            <div class="info-block">
                                <h3>Permanence du jour</h3>
                                <p>üìÖ <strong>Date :</strong> ${date}</p>
                                <p>üèòÔ∏è <strong>Village :</strong> ${village}</p>
                                <p>‚è∞ <strong>Heure :</strong> ${heure}</p>
                                <p>üìç <strong>Lieu :</strong> ${lieu}</p>
                            </div>
                        `;
                    } else {
                        resultHTML += `
                            <p class="no-data">Aucune permanence pr√©vue ce jour.</p>
                            ${getNextPermanence(entries, today)}
                        `;
                    }
                } else {
                    resultHTML += `
                        <p class="no-data">Aucune permanence pr√©vue ce jour.</p>
                        ${getNextPermanence(entries, today)}
                    `;
                }

                resultDiv.innerHTML = resultHTML;

            } catch (error) {
                console.error("Erreur lors de la r√©cup√©ration des donn√©es :", error);
                document.getElementById('result').innerHTML = "<p>Erreur lors de la r√©cup√©ration des donn√©es.</p>";
            }
        }

        function getNextPermanence(entries, today) {
            const nextPermanence = entries
                .map(row => ({ date: parseDate(row[0]), details: row }))
                .filter(entry => entry.date && entry.date > today && entry.details[1] && entry.details[2] && entry.details[3])
                .sort((a, b) => a.date - b.date)[0];

            if (nextPermanence) {
                const [nextDate, nextVillage, nextHeure, nextLieu] = nextPermanence.details;
                return `
                    <div class="info-block">
                        <h3>Prochaine permanence</h3>
                        <p>üìÖ <strong>Date :</strong> ${nextDate}</p>
                        <p>üèòÔ∏è <strong>Village :</strong> ${nextVillage}</p>
                        <p>‚è∞ <strong>Heure :</strong> ${nextHeure}</p>
                        <p>üìç <strong>Lieu :</strong> ${nextLieu}</p>
                    </div>
                `;
            }
            return "<p>Aucune permanence √† venir.</p>";
        }

        function parseDate(dateString) {
            if (!dateString) return null;
            const [day, month, year] = dateString.split('/').map(Number);
            return new Date(year, month - 1, day);
        }

        window.onload = fetchPlanning;
    </script>
</head>
<body>
    <h1>Permanence num√©rique du jour</h1>
    <div id="result">Chargement...</div>
</body>
</html>
